//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class TimerInfoWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(TimerInfo), typeof(System.Object));
		L.RegFunction("SetInterval", SetInterval);
		L.RegFunction("Tick", Tick);
		L.RegFunction("Reset", Reset);
		L.RegFunction("New", _CreateTimerInfo);
		L.RegFunction("__tostring", Lua_ToString);
		L.RegVar("timerState", get_timerState, set_timerState);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateTimerInfo(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(float), typeof(int), typeof(System.Action)))
			{
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				System.Action arg2 = null;
				LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

				if (funcType3 != LuaTypes.LUA_TFUNCTION)
				{
					 arg2 = (System.Action)ToLua.CheckObject(L, 3, typeof(System.Action));
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 3);
					arg2 = DelegateFactory.CreateDelegate(typeof(System.Action), func) as System.Action;
				}

				TimerInfo obj = new TimerInfo(arg0, arg1, arg2);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(float), typeof(int), typeof(LuaInterface.LuaFunction)))
			{
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				LuaFunction arg2 = ToLua.CheckLuaFunction(L, 3);
				TimerInfo obj = new TimerInfo(arg0, arg1, arg2);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: TimerInfo.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetInterval(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			TimerInfo obj = (TimerInfo)ToLua.CheckObject(L, 1, typeof(TimerInfo));
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.SetInterval(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Tick(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			TimerInfo obj = (TimerInfo)ToLua.CheckObject(L, 1, typeof(TimerInfo));
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.Tick(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Reset(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			TimerInfo obj = (TimerInfo)ToLua.CheckObject(L, 1, typeof(TimerInfo));
			obj.Reset();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lua_ToString(IntPtr L)
	{
		object obj = ToLua.ToObject(L, 1);

		if (obj != null)
		{
			LuaDLL.lua_pushstring(L, obj.ToString());
		}
		else
		{
			LuaDLL.lua_pushnil(L);
		}

		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_timerState(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			TimerInfo obj = (TimerInfo)o;
			TimerState ret = obj.timerState;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index timerState on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_timerState(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			TimerInfo obj = (TimerInfo)o;
			TimerState arg0 = (TimerState)ToLua.CheckObject(L, 2, typeof(TimerState));
			obj.timerState = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index timerState on a nil value" : e.Message);
		}
	}
}


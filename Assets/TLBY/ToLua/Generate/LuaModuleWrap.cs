//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class LuaModuleWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(LuaModule), typeof(System.Object));
		L.RegFunction("Handle", Handle);
		L.RegFunction("RunLuaRequest", RunLuaRequest);
		L.RegFunction("New", _CreateLuaModule);
		L.RegFunction("__tostring", Lua_ToString);
		L.RegVar("recvCount", get_recvCount, null);
		L.RegVar("sendCount", get_sendCount, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateLuaModule(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				LuaModule obj = new LuaModule();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: LuaModule.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Handle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			LuaModule obj = (LuaModule)ToLua.CheckObject(L, 1, typeof(LuaModule));
			Connection arg0 = (Connection)ToLua.CheckObject(L, 2, typeof(Connection));
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			byte[] arg2 = ToLua.CheckByteBuffer(L, 4);
			obj.Handle(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RunLuaRequest(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			LuaModule obj = (LuaModule)ToLua.CheckObject(L, 1, typeof(LuaModule));
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 2);
			byte[] arg1 = ToLua.CheckByteBuffer(L, 3);
			Connection arg2 = (Connection)ToLua.CheckObject(L, 4, typeof(Connection));
			obj.RunLuaRequest(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lua_ToString(IntPtr L)
	{
		object obj = ToLua.ToObject(L, 1);

		if (obj != null)
		{
			LuaDLL.lua_pushstring(L, obj.ToString());
		}
		else
		{
			LuaDLL.lua_pushnil(L);
		}

		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_recvCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LuaModule obj = (LuaModule)o;
			int ret = obj.recvCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index recvCount on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_sendCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LuaModule obj = (LuaModule)o;
			int ret = obj.sendCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index sendCount on a nil value" : e.Message);
		}
	}
}


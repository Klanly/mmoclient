//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class BETweenMethodWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(BETweenMethod));
		L.RegVar("linear", get_linear, null);
		L.RegVar("easeIn", get_easeIn, null);
		L.RegVar("easeOut", get_easeOut, null);
		L.RegVar("easeInOut", get_easeInOut, null);
		L.RegVar("easeOutIn", get_easeOutIn, null);
		L.RegVar("easeInBack", get_easeInBack, null);
		L.RegVar("easeOutBack", get_easeOutBack, null);
		L.RegFunction("IntToEnum", IntToEnum);
		L.EndEnum();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_linear(IntPtr L)
	{
		ToLua.Push(L, BETweenMethod.linear);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_easeIn(IntPtr L)
	{
		ToLua.Push(L, BETweenMethod.easeIn);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_easeOut(IntPtr L)
	{
		ToLua.Push(L, BETweenMethod.easeOut);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_easeInOut(IntPtr L)
	{
		ToLua.Push(L, BETweenMethod.easeInOut);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_easeOutIn(IntPtr L)
	{
		ToLua.Push(L, BETweenMethod.easeOutIn);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_easeInBack(IntPtr L)
	{
		ToLua.Push(L, BETweenMethod.easeInBack);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_easeOutBack(IntPtr L)
	{
		ToLua.Push(L, BETweenMethod.easeOutBack);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
		BETweenMethod o = (BETweenMethod)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

